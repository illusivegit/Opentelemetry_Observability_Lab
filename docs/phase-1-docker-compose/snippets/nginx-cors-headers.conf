# Nginx CORS Headers Configuration
# Source: frontend/default.conf
# Reference: DESIGN-DECISIONS.md DD-013

# CORS headers for API endpoints
# These work in conjunction with Flask-CORS for defense-in-depth

location /api/ {
    # Handle CORS preflight requests (OPTIONS)
    if ($request_method = OPTIONS) {
        add_header 'Access-Control-Allow-Origin' '*';
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
        add_header 'Access-Control-Allow-Headers' '*';
        add_header 'Access-Control-Max-Age' 1728000;  # Cache preflight for 20 days
        add_header 'Content-Type' 'text/plain; charset=utf-8';
        add_header 'Content-Length' 0;
        return 204;
    }

    # CORS headers for actual requests (GET, POST, etc.)
    add_header 'Access-Control-Allow-Origin' '*' always;
    add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
    add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization' always;

    # Rest of proxy configuration...
}

# Why these headers?
# - Access-Control-Allow-Origin: Permits requests from any origin (lab environment)
# - Access-Control-Allow-Methods: Specifies allowed HTTP methods
# - Access-Control-Allow-Headers: Permits Content-Type and Authorization headers
# - 'always' directive: Ensures headers sent even on error responses (4xx, 5xx)
#
# Production Note:
# - Replace '*' with specific origins: 'https://app.example.com'
# - Add Access-Control-Allow-Credentials: true if using cookies
