# Nginx Docker DNS Resolver Configuration
# Source: frontend/default.conf
# Reference: DESIGN-DECISIONS.md DD-009, architecture/network.md

server {
    listen 80;
    server_name _;

    # Docker DNS resolver configuration
    # 127.0.0.11 is Docker's internal DNS server (available in every container)
    resolver 127.0.0.11 ipv6=off valid=30s;

    # Key parameters:
    # - 127.0.0.11: Docker's DNS server (embedded in all containers)
    # - ipv6=off: Disable IPv6 resolution (not used in this lab)
    # - valid=30s: Cache DNS entries for 30 seconds (prevents stale IPs)

    location /api/ {
        # Use variable to force dynamic DNS resolution
        # Without variable, Nginx caches IP at startup (fails on backend restart)
        set $backend_upstream http://backend:5000;
        proxy_pass $backend_upstream;
    }
}

# Why this matters:
#
# ❌ WRONG (static resolution):
# location /api/ {
#     proxy_pass http://backend:5000;  # Resolved once at nginx startup
# }
# Problem: If backend container restarts and gets new IP, Nginx still uses old IP
# Result: 502 Bad Gateway until Nginx reload
#
# ✅ CORRECT (dynamic resolution):
# location /api/ {
#     resolver 127.0.0.11 valid=30s;    # Tell Nginx where to resolve
#     set $backend_upstream http://backend:5000;  # Force variable usage
#     proxy_pass $backend_upstream;     # Resolves on every request (cached 30s)
# }
# Benefit: Backend restarts handled gracefully without Nginx reload
#
# Trade-off: Slight DNS overhead (~0.1ms) vs operational resilience

# Production notes:
# - Increase valid time (5m) for more stable environments
# - Monitor resolver performance: access_log shows DNS resolution time
# - Consider static IPs + /etc/hosts if DNS is bottleneck
