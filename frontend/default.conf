server {
  listen 80;
  server_name _;

  root /usr/share/nginx/html;
  index index.html;

  # Docker's embedded DNS server - enables dynamic service discovery
  # valid=30s: re-resolve every 30 seconds (Docker default TTL)
  # ipv6=off: disable IPv6 resolution (optional, for clarity)
  resolver 127.0.0.11 ipv6=off valid=30s;

  # Serve static files
  location / {
    try_files $uri $uri/ /index.html;
  }

  # Proxy API to Flask backend container (Docker network name: backend:5000)
  # Using variable to force runtime DNS resolution on every request
  # This allows backend container IP to change without requiring Nginx reload
  location /api/ {
    # Handle CORS preflight quickly (optional convenience)
    if ($request_method = OPTIONS) {
      add_header Access-Control-Allow-Origin *;
      add_header Access-Control-Allow-Methods GET,POST,PUT,DELETE,OPTIONS;
      add_header Access-Control-Allow-Headers *;
      return 204;
    }

    # Variable forces Nginx to re-resolve backend DNS on every request
    # instead of caching at startup (prevents stale IP after container rebuild)
    set $backend_upstream http://backend:5000;
    # NOTE: With variable, Nginx sends the full original URI (/api/...) unchanged
    proxy_pass $backend_upstream;

    proxy_http_version 1.1;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;

    # Timeouts for better error visibility
    proxy_connect_timeout 5s;
    proxy_read_timeout 60s;

    # CORS headers on proxied responses
    add_header Access-Control-Allow-Origin *;
    add_header Access-Control-Allow-Methods GET,POST,PUT,DELETE,OPTIONS;
    add_header Access-Control-Allow-Headers *;
  }
}
